(use 'std/core.ae')
(use 'std/term.ae')
(use 'std/str.ae')
(use 'std/io.ae')

(macro error [...messages] ->
  (println term/fg-red term/bold 'ERROR'
           term/reset ': ' (join [messages] ' ')))

(let args (get-args))
(let env (make-env))

(if (< (len args) 2)
  (error 'Input file was not provided')
  (exit 1))

(let core-path '/usr/include/aether/std/core.ae')
(let core-content (read-file core-path))
(if (unit? core-content)
  (error 'Could not load core module')
  (exit 1))

(let core-compiled (compile env core-content core-path))
(eval-compiled env core-compiled)

(let path (get-at args 1))
(let content (read-file path))
(if (unit? content)
  (error 'Could not open input file' path)
  (exit 1))

(let compiled (compile env content path))
(eval-compiled env compiled)
